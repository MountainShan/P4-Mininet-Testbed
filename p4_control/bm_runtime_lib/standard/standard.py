#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def bm_register_read(self, cxt_id, register_array_name, idx):
    """
    Parameters:
     - cxt_id
     - register_array_name
     - idx
    """
    pass

  def bm_register_read_all(self, cxt_id, register_array_name):
    """
    Parameters:
     - cxt_id
     - register_array_name
    """
    pass

  def bm_register_write(self, cxt_id, register_array_name, index, value):
    """
    Parameters:
     - cxt_id
     - register_array_name
     - index
     - value
    """
    pass

  def bm_register_write_range(self, cxt_id, register_array_name, start_index, end_index, value):
    """
    Parameters:
     - cxt_id
     - register_array_name
     - start_index
     - end_index
     - value
    """
    pass

  def bm_register_reset(self, cxt_id, register_array_name):
    """
    Parameters:
     - cxt_id
     - register_array_name
    """
    pass

  def mirroring_mapping_add(self, mirror_id, egress_port):
    """
    Parameters:
     - mirror_id
     - egress_port
    """
    pass

  def mirroring_mapping_delete(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    pass

  def mirroring_mapping_get_egress_port(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    pass

  def mirroring_session_add(self, mirror_id, config):
    """
    Parameters:
     - mirror_id
     - config
    """
    pass

  def mirroring_session_delete(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    pass

  def mirroring_session_get(self, mirror_id):
    """
    Parameters:
     - mirror_id
    """
    pass

  def set_egress_queue_depth(self, port_num, depth_pkts):
    """
    Parameters:
     - port_num
     - depth_pkts
    """
    pass

  def set_all_egress_queue_depths(self, depth_pkts):
    """
    Parameters:
     - depth_pkts
    """
    pass

  def set_egress_queue_rate(self, port_num, rate_pps):
    """
    Parameters:
     - port_num
     - rate_pps
    """
    pass

  def set_all_egress_queue_rates(self, rate_pps):
    """
    Parameters:
     - rate_pps
    """
    pass

  def bm_get_config(self):
    pass

  def bm_get_config_md5(self):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def bm_register_read(self, cxt_id, register_array_name, idx):
    """
    Parameters:
     - cxt_id
     - register_array_name
     - idx
    """
    self.send_bm_register_read(cxt_id, register_array_name, idx)
    return self.recv_bm_register_read()

  def send_bm_register_read(self, cxt_id, register_array_name, idx):
    self._oprot.writeMessageBegin('bm_register_read', TMessageType.CALL, self._seqid)
    args = bm_register_read_args()
    args.cxt_id = cxt_id
    args.register_array_name = register_array_name
    args.idx = idx
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_register_read(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_register_read_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_register_read failed: unknown result");

  def bm_register_read_all(self, cxt_id, register_array_name):
    """
    Parameters:
     - cxt_id
     - register_array_name
    """
    self.send_bm_register_read_all(cxt_id, register_array_name)
    return self.recv_bm_register_read_all()

  def send_bm_register_read_all(self, cxt_id, register_array_name):
    self._oprot.writeMessageBegin('bm_register_read_all', TMessageType.CALL, self._seqid)
    args = bm_register_read_all_args()
    args.cxt_id = cxt_id
    args.register_array_name = register_array_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_register_read_all(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_register_read_all_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_register_read_all failed: unknown result");

  def bm_register_write(self, cxt_id, register_array_name, index, value):
    """
    Parameters:
     - cxt_id
     - register_array_name
     - index
     - value
    """
    self.send_bm_register_write(cxt_id, register_array_name, index, value)
    self.recv_bm_register_write()

  def send_bm_register_write(self, cxt_id, register_array_name, index, value):
    self._oprot.writeMessageBegin('bm_register_write', TMessageType.CALL, self._seqid)
    args = bm_register_write_args()
    args.cxt_id = cxt_id
    args.register_array_name = register_array_name
    args.index = index
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_register_write(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_register_write_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_register_write_range(self, cxt_id, register_array_name, start_index, end_index, value):
    """
    Parameters:
     - cxt_id
     - register_array_name
     - start_index
     - end_index
     - value
    """
    self.send_bm_register_write_range(cxt_id, register_array_name, start_index, end_index, value)
    self.recv_bm_register_write_range()

  def send_bm_register_write_range(self, cxt_id, register_array_name, start_index, end_index, value):
    self._oprot.writeMessageBegin('bm_register_write_range', TMessageType.CALL, self._seqid)
    args = bm_register_write_range_args()
    args.cxt_id = cxt_id
    args.register_array_name = register_array_name
    args.start_index = start_index
    args.end_index = end_index
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_register_write_range(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_register_write_range_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_register_reset(self, cxt_id, register_array_name):
    """
    Parameters:
     - cxt_id
     - register_array_name
    """
    self.send_bm_register_reset(cxt_id, register_array_name)
    self.recv_bm_register_reset()

  def send_bm_register_reset(self, cxt_id, register_array_name):
    self._oprot.writeMessageBegin('bm_register_reset', TMessageType.CALL, self._seqid)
    args = bm_register_reset_args()
    args.cxt_id = cxt_id
    args.register_array_name = register_array_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_register_reset(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_register_reset_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_get_config(self):
    self.send_bm_get_config()
    return self.recv_bm_get_config()

  def send_bm_get_config(self):
    self._oprot.writeMessageBegin('bm_get_config', TMessageType.CALL, self._seqid)
    args = bm_get_config_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_get_config(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_get_config_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_get_config failed: unknown result");

  def bm_get_config_md5(self):
    self.send_bm_get_config_md5()
    return self.recv_bm_get_config_md5()

  def send_bm_get_config_md5(self):
    self._oprot.writeMessageBegin('bm_get_config_md5', TMessageType.CALL, self._seqid)
    args = bm_get_config_md5_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_get_config_md5(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_get_config_md5_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_get_config_md5 failed: unknown result");

class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["bm_register_read"] = Processor.process_bm_register_read
    self._processMap["bm_register_read_all"] = Processor.process_bm_register_read_all
    self._processMap["bm_register_write"] = Processor.process_bm_register_write
    self._processMap["bm_register_write_range"] = Processor.process_bm_register_write_range
    self._processMap["bm_register_reset"] = Processor.process_bm_register_reset
    
    self._processMap["bm_get_config"] = Processor.process_bm_get_config
    self._processMap["bm_get_config_md5"] = Processor.process_bm_get_config_md5

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_bm_register_read(self, seqid, iprot, oprot):
    args = bm_register_read_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_register_read_result()
    try:
      result.success = self._handler.bm_register_read(args.cxt_id, args.register_array_name, args.idx)
    except InvalidRegisterOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_register_read", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_register_read_all(self, seqid, iprot, oprot):
    args = bm_register_read_all_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_register_read_all_result()
    try:
      result.success = self._handler.bm_register_read_all(args.cxt_id, args.register_array_name)
    except InvalidRegisterOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_register_read_all", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_register_write(self, seqid, iprot, oprot):
    args = bm_register_write_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_register_write_result()
    try:
      self._handler.bm_register_write(args.cxt_id, args.register_array_name, args.index, args.value)
    except InvalidRegisterOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_register_write", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_register_write_range(self, seqid, iprot, oprot):
    args = bm_register_write_range_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_register_write_range_result()
    try:
      self._handler.bm_register_write_range(args.cxt_id, args.register_array_name, args.start_index, args.end_index, args.value)
    except InvalidRegisterOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_register_write_range", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_register_reset(self, seqid, iprot, oprot):
    args = bm_register_reset_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_register_reset_result()
    try:
      self._handler.bm_register_reset(args.cxt_id, args.register_array_name)
    except InvalidRegisterOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_register_reset", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_get_config(self, seqid, iprot, oprot):
    args = bm_get_config_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_get_config_result()
    result.success = self._handler.bm_get_config()
    oprot.writeMessageBegin("bm_get_config", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_get_config_md5(self, seqid, iprot, oprot):
    args = bm_get_config_md5_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_get_config_md5_result()
    result.success = self._handler.bm_get_config_md5()
    oprot.writeMessageBegin("bm_get_config_md5", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  

# HELPER FUNCTIONS AND STRUCTURES

class bm_register_read_args:
  """
  Attributes:
   - cxt_id
   - register_array_name
   - idx
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.STRING, 'register_array_name', None, None, ), # 2
    (3, TType.I32, 'idx', None, None, ), # 3
  )

  def __init__(self, cxt_id=None, register_array_name=None, idx=None,):
    self.cxt_id = cxt_id
    self.register_array_name = register_array_name
    self.idx = idx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.register_array_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.idx = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_read_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.register_array_name is not None:
      oprot.writeFieldBegin('register_array_name', TType.STRING, 2)
      oprot.writeString(self.register_array_name)
      oprot.writeFieldEnd()
    if self.idx is not None:
      oprot.writeFieldBegin('idx', TType.I32, 3)
      oprot.writeI32(self.idx)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.register_array_name)
    value = (value * 31) ^ hash(self.idx)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_read_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidRegisterOperation, InvalidRegisterOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidRegisterOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_read_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_read_all_args:
  """
  Attributes:
   - cxt_id
   - register_array_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.STRING, 'register_array_name', None, None, ), # 2
  )

  def __init__(self, cxt_id=None, register_array_name=None,):
    self.cxt_id = cxt_id
    self.register_array_name = register_array_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.register_array_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_read_all_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.register_array_name is not None:
      oprot.writeFieldBegin('register_array_name', TType.STRING, 2)
      oprot.writeString(self.register_array_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.register_array_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_read_all_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidRegisterOperation, InvalidRegisterOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype166, _size163) = iprot.readListBegin()
          for _i167 in xrange(_size163):
            _elem168 = iprot.readI64();
            self.success.append(_elem168)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidRegisterOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_read_all_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter169 in self.success:
        oprot.writeI64(iter169)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_write_args:
  """
  Attributes:
   - cxt_id
   - register_array_name
   - index
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.STRING, 'register_array_name', None, None, ), # 2
    (3, TType.I32, 'index', None, None, ), # 3
    (4, TType.I64, 'value', None, None, ), # 4
  )

  def __init__(self, cxt_id=None, register_array_name=None, index=None, value=None,):
    self.cxt_id = cxt_id
    self.register_array_name = register_array_name
    self.index = index
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.register_array_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_write_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.register_array_name is not None:
      oprot.writeFieldBegin('register_array_name', TType.STRING, 2)
      oprot.writeString(self.register_array_name)
      oprot.writeFieldEnd()
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 3)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I64, 4)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.register_array_name)
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_write_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidRegisterOperation, InvalidRegisterOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidRegisterOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_write_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_write_range_args:
  """
  Attributes:
   - cxt_id
   - register_array_name
   - start_index
   - end_index
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.STRING, 'register_array_name', None, None, ), # 2
    (3, TType.I32, 'start_index', None, None, ), # 3
    (4, TType.I32, 'end_index', None, None, ), # 4
    (5, TType.I64, 'value', None, None, ), # 5
  )

  def __init__(self, cxt_id=None, register_array_name=None, start_index=None, end_index=None, value=None,):
    self.cxt_id = cxt_id
    self.register_array_name = register_array_name
    self.start_index = start_index
    self.end_index = end_index
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.register_array_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.start_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_write_range_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.register_array_name is not None:
      oprot.writeFieldBegin('register_array_name', TType.STRING, 2)
      oprot.writeString(self.register_array_name)
      oprot.writeFieldEnd()
    if self.start_index is not None:
      oprot.writeFieldBegin('start_index', TType.I32, 3)
      oprot.writeI32(self.start_index)
      oprot.writeFieldEnd()
    if self.end_index is not None:
      oprot.writeFieldBegin('end_index', TType.I32, 4)
      oprot.writeI32(self.end_index)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I64, 5)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.register_array_name)
    value = (value * 31) ^ hash(self.start_index)
    value = (value * 31) ^ hash(self.end_index)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_write_range_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidRegisterOperation, InvalidRegisterOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidRegisterOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_write_range_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_reset_args:
  """
  Attributes:
   - cxt_id
   - register_array_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.STRING, 'register_array_name', None, None, ), # 2
  )

  def __init__(self, cxt_id=None, register_array_name=None,):
    self.cxt_id = cxt_id
    self.register_array_name = register_array_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.register_array_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_reset_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.register_array_name is not None:
      oprot.writeFieldBegin('register_array_name', TType.STRING, 2)
      oprot.writeString(self.register_array_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.register_array_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_register_reset_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidRegisterOperation, InvalidRegisterOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidRegisterOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_register_reset_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_get_config_md5_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_get_config_md5_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_get_config_md5_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_get_config_md5_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
